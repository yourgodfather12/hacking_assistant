import subprocess
import logging
from config import OPENVAS_CMD
from core.cve_lookup import fetch_cve, get_cve_description, get_cve_severity

logger = logging.getLogger(__name__)

def extract_cve_ids(scan_output: str) -> list:
    """
    Extract CVE IDs from the scan output.
    :param scan_output: The raw scan output from the vulnerability scanner.
    :return: A list of CVE IDs.
    """
    # Placeholder implementation, assumes CVE IDs are mentioned in the scan output.
    import re
    return re.findall(r'CVE-\d{4}-\d{4,7}', scan_output)

def scan_target(target: str) -> dict:
    """
    Run a vulnerability scan on the target using OpenVAS and fetch related CVE details.
    :param target: The target IP or hostname.
    :return: A dictionary with scan results and associated CVE details.
    """
    try:
        result = subprocess.run([OPENVAS_CMD, "--target", target], capture_output=True, text=True, check=True, timeout=600)
        logger.info(f"Vulnerability scan completed for target {target}.")
        scan_output = result.stdout

        cve_ids = extract_cve_ids(scan_output)
        if not cve_ids:
            logger.warning(f"No CVE IDs found in scan output for target {target}.")

        cve_details = []
        for cve_id in cve_ids:
            cve_data = fetch_cve(cve_id)
            if "error" not in cve_data:
                description = get_cve_description(cve_data)
                severity = get_cve_severity(cve_data)
                cve_details.append({
                    "id": cve_id,
                    "description": description,
                    "severity": severity,
                })
            else:
                cve_details.append({"id": cve_id, "error": cve_data["error"]})

        return {
            "scan_results": scan_output,
            "cve_details": cve_details
        }
    except subprocess.CalledProcessError as e:
        logger.error(f"OpenVAS command failed for target {target}: {e}")
        return {"error": f"An error occurred: {e.output}"}
    except subprocess.TimeoutExpired:
        logger.error(f"OpenVAS command timed out for target {target}.")
        return {"error": "Error: Command timed out."}
    except Exception as e:
        logger.error(f"Unexpected error during vulnerability scan of {target}: {e}")
        return {"error": f"Unexpected error: {e}"}
